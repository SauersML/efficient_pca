name: Rust CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: read
  issues: write

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        backend: [openblas, mkl, faer]
        include:
          - backend: openblas
            feature: backend_openblas
            rustflags: ""
          - backend: mkl
            feature: backend_mkl
            rustflags: "-L/opt/intel/oneapi/mkl/latest/lib/intel64"
          - backend: faer # This name is just a label for the matrix row
            feature: "faer_links_ndarray_static_openblas"
            rustflags: ""

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt, clippy

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/rust.yml') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ steps.setup-python.outputs.python-version }}-

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install numpy scikit-learn scipy

      - name: Cache gfortran apt package
        uses: actions/cache@v4
        id: cache-gfortran
        if: matrix.backend == 'openblas' || matrix.backend == 'faer' # Only run this step if gfortran is needed
        with:
          path: |
            /var/cache/apt/archives
            /var/lib/apt/lists
          key: ${{ runner.os }}-apt-gfortran-${{ hashFiles('**/rust.yml') }}
          restore-keys: |
            ${{ runner.os }}-apt-gfortran-

      - name: Install Fortran compiler
        if: matrix.backend == 'openblas' || matrix.backend == 'faer'
        run: |
          if [[ "${{ steps.cache-gfortran.outputs.cache-hit }}" != 'true' ]]; then
            sudo apt-get update -qq
          fi
          sudo apt-get install -y gfortran

      - name: Setup Intel MKL Repository
        if: matrix.backend == 'mkl'
        run: |
          wget -qO- https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB | 
            sudo gpg --dearmor --output /usr/share/keyrings/intel-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/intel-archive-keyring.gpg] https://apt.repos.intel.com/oneapi all main" | 
            sudo tee /etc/apt/sources.list.d/oneAPI.list

      - name: Cache Intel MKL apt package
        uses: actions/cache@v4
        id: cache-mkl
        if: matrix.backend == 'mkl'
        with:
          path: |
            /var/cache/apt/archives
            /var/lib/apt/lists
          key: ${{ runner.os }}-apt-mkl-${{ hashFiles('**/rust.yml') }}
          restore-keys: |
            ${{ runner.os }}-apt-mkl-

      - name: Install Intel MKL
        if: matrix.backend == 'mkl'
        run: |
          if [[ "${{ steps.cache-mkl.outputs.cache-hit }}" != 'true' ]]; then
            sudo apt-get update -qq
          fi
          sudo apt-get install -y intel-oneapi-mkl-devel
          echo "MKL_ROOT=/opt/intel/oneapi/mkl/latest" >> "$GITHUB_ENV"
          echo "LD_LIBRARY_PATH=/opt/intel/oneapi/mkl/latest/lib/intel64${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}" >> "$GITHUB_ENV"

      - name: Cache Cargo registry, git, and target directories
        uses: actions/cache@v4
        id: cache-cargo
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.backend }}-${{ hashFiles('**/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.backend }}-${{ hashFiles('**/Cargo.toml') }}-
            ${{ runner.os }}-cargo-${{ matrix.backend }}-
            ${{ runner.os }}-cargo-

      - name: Build
        run: |
          if [[ "${{ matrix.feature }}" == "backend_openblas" ]]; then
            cargo build --release --features ${{ matrix.feature }}
          else
            cargo build --release --no-default-features --features ${{ matrix.feature }}
          fi
        env:
          RUSTFLAGS: ${{ matrix.rustflags }}

      - name: Test
        run: |
          if [[ "${{ matrix.feature }}" == "backend_openblas" ]]; then
            cargo test --features ${{ matrix.feature }}
          else
            cargo test --no-default-features --features ${{ matrix.feature }}
          fi
        env:
          RUSTFLAGS: ${{ matrix.rustflags }}
          RUST_BACKTRACE: 1

      - name: Upload eigensnp test summary
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: eigensnp-test-artifacts-${{ matrix.backend }}
          path: target/test_artifacts/
          retention-days: 7 # Optional: Keep for 7 days

      - name: Benchmark
        run: |
          if [[ "${{ matrix.feature }}" == "backend_openblas" ]]; then
            cargo bench --features ${{ matrix.feature }},jemalloc
          else
            cargo bench --no-default-features --features ${{ matrix.feature }},jemalloc
          fi
        env:
          RUSTFLAGS: ${{ matrix.rustflags }}
          RUST_BACKTRACE: 1

      - name: Upload Raw Benchmark Results
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: raw-benchmark-results-${{ matrix.backend }}.tsv
          path: benchmark_raw_results.tsv

      - name: Generate failure report
        if: failure()
        run: |
          cargo install getdoc --locked
          getdoc --features ${{ matrix.feature }}
          mv report.md failure-report-${{ matrix.backend }}.md

      - name: Upload failure report
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: failure-report-${{ matrix.backend }}
          path: failure-report-${{ matrix.backend }}.md

  consolidate-failures:
    if: always() && needs.test.result == 'failure'
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Download failure reports
        uses: actions/download-artifact@v4
        with:
          pattern: failure-report-*
          path: reports
          merge-multiple: true

      - name: Consolidate reports
        run: |
          exec > consolidated-report.md
          cat << EOF
          # CI Failure Report
          
          **Run ID:** ${{ github.run_id }}
          **Commit:** ${{ github.sha }}
          **Branch:** ${{ github.ref_name }}
          **Timestamp:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          EOF
          
          for report in reports/failure-report-*.md; do
            if [[ -f "$report" ]]; then
              backend=$(basename "$report" .md | sed 's/failure-report-//')
              cat << EOF
          
          ## Backend: ${backend}
          
          EOF
              cat "$report"
              echo -e "\n---\n"
            fi
          done

      - name: Upload consolidated report
        uses: actions/upload-artifact@v4
        with:
          name: consolidated-failure-report
          path: consolidated-report.md

      - name: Close stale issues
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/github-script@v7
        with:
          script: |
            const cutoff = new Date(Date.now() - 24 * 60 * 60 * 1000);
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'ci-failure,automated',
            });
            
            for (const issue of issues) {
              if (new Date(issue.created_at) < cutoff && 
                  issue.title.includes('CI Failure Report')) {
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  state: 'closed'
                });
              }
            }

      - name: Create failure issue
        if: (github.event_name == 'push' && github.ref == 'refs/heads/main' || github.event_name == 'pull_request' && github.base_ref == 'main')
        uses: peter-evans/create-issue-from-file@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          title: "CI Failure Report - Run ${{ github.run_id }}"
          content-filepath: consolidated-report.md
          labels: ci-failure,automated

  analyze_benchmarks:
    runs-on: ubuntu-latest
    needs: test
    if: success() # 'test' job (all matrix legs) completed successfully
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13' # Matched version in 'test' job

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas matplotlib seaborn scipy numpy

      - name: Download benchmark TSV artifacts
        uses: actions/download-artifact@v4
        with:
          # Pattern to download all raw benchmark TSVs from different backends
          pattern: raw-benchmark-results-*.tsv 
          path: benches/benchmark_artifacts 
          merge-multiple: true # Explicitly add this line
          # 'merge-multiple' is true by default if 'name' is not given and 'pattern' is.
          # This should place all downloaded files into the 'path' directory.

      - name: Run benchmark analysis script
        run: python benches/analyze_benchmarks.py

      - name: Upload analysis results
        uses: actions/upload-artifact@v4
        with:
          name: consolidated-benchmark-analysis-results
          path: benches/output/ # Uploads the whole directory
