name: Rust CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build_test_bench:
    name: Build, Test & Bench (${{ matrix.blas_backend }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        blas_backend: [backend_openblas, backend_mkl, backend_faer]
        include:
          - blas_backend: backend_openblas
            os: ubuntu-latest
            rust_flags: "" # No specific flags needed for OpenBLAS usually
            backend_feature: backend_openblas
            ld_library_path_mkl: "" # No MKL path for openblas
          - blas_backend: backend_mkl
            os: ubuntu-latest # MKL setup will be for Linux
            # The RUSTFLAGS are often needed at compile time to find MKL libs
            rust_flags: "-L/opt/intel/oneapi/mkl/latest/lib/intel64"
            backend_feature: backend_mkl
            # LD_LIBRARY_PATH is often needed at runtime
            ld_library_path_mkl: "/opt/intel/oneapi/mkl/latest/lib/intel64"
          - blas_backend: backend_faer
            os: ubuntu-latest
            backend_feature: backend_faer
            ld_library_path_mkl: ""
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        id: install_rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: '' # Add 'clippy', 'rustfmt' if needed later

      - name: Get Rust compiler version
        id: rust_version
        run: echo "version=$(rustc --version)" >> $GITHUB_OUTPUT

      # ------------------------- Python Setup -------------------------
      - name: Set up Python üêç
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install Python dependencies üì¶
        run: |
          python -m pip install --upgrade pip
          pip install numpy scikit-learn scipy
      # ----------------------------------------------------------------

      - name: Install OpenBLAS
        if: matrix.blas_backend == 'backend_openblas'
        run: |
          sudo apt-get update
          sudo apt-get install -y libopenblas-dev
      
      - name: Install Intel MKL
        if: matrix.blas_backend == 'backend_mkl'
        run: |
          # Download the key to system keyring
          wget -O- https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB | sudo gpg --dearmor --output /usr/share/keyrings/intel-archive-keyring.gpg
          # Add the Intel repository
          echo "deb [signed-by=/usr/share/keyrings/intel-archive-keyring.gpg] https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
          # Update package lists
          sudo apt-get update
          # Install Intel oneAPI MKL Developer package
          sudo apt-get install -y intel-oneapi-mkl-devel
          # Set MKL_ROOT and update LD_LIBRARY_PATH.
          echo "MKL_ROOT=/opt/intel/oneapi/mkl/latest" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=/opt/intel/oneapi/mkl/latest/lib/intel64:${LD_LIBRARY_PATH}" >> $GITHUB_ENV

      # Cache for Cargo's downloaded dependencies
      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        id: cache-cargo-deps
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-deps-${{ hashFiles('**/Cargo.toml') }}-${{ matrix.blas_backend }}
          restore-keys: |
            ${{ runner.os }}-cargo-deps-${{ hashFiles('**/Cargo.toml') }}-
            ${{ runner.os }}-cargo-deps-

      # Cache for the Rust build artifacts (target directory)
      - name: Cache Rust target directory
        uses: actions/cache@v4
        id: cache-rust-target
        with:
          path: target
          key: ${{ runner.os }}-target-${{ steps.rust_version.outputs.version }}-${{ hashFiles('**/Cargo.toml') }}-${{ hashFiles('**/src/**/*.rs', '**/examples/**/*.rs', '**/tests/**/*.rs', '**/benches/**/*.rs', '**/lib.rs', '**/main.rs', '**/build.rs') }}-${{ matrix.blas_backend }}
          restore-keys: |
            ${{ runner.os }}-target-${{ steps.rust_version.outputs.version }}-${{ hashFiles('**/Cargo.toml') }}-
            ${{ runner.os }}-target-${{ steps.rust_version.outputs.version }}-
            ${{ runner.os }}-target-

      - name: Build üõ†Ô∏è (${{ matrix.blas_backend }})
        run: cargo build --verbose --release --features ${{ matrix.backend_feature }}
        env:
          RUSTFLAGS: ${{ matrix.rust_flags }}

      - name: Run tests üß™ (${{ matrix.blas_backend }})
        run: cargo test --verbose --features ${{ matrix.backend_feature }}
        env:
          RUSTFLAGS: ${{ matrix.rust_flags }}
          LD_LIBRARY_PATH: ${{ env.LD_LIBRARY_PATH }} # Prepend MKL path if defined
          RUST_BACKTRACE: 1
      
      - name: Run benchmarks (${{ matrix.blas_backend }})
        run: cargo bench --features ${{ matrix.backend_feature }}
        env:
          RUSTFLAGS: ${{ matrix.rust_flags }}
          LD_LIBRARY_PATH: ${{ env.LD_LIBRARY_PATH }} # Prepend MKL path if defined
          RUST_BACKTRACE: 1
